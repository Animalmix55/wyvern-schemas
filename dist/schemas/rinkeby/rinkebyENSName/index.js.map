{"version":3,"sources":["../../../../dist-tsc/schemas/rinkeby/rinkebyENSName/index.js"],"names":["Object","defineProperty","exports","value","ethereumjs_util_1","require","Web3","types_1","namehash","name","node","labels","split","i","length","labelHash","sha3","toString","Buffer","nodehash","label","rinkebyENSNameSchema","version","deploymentBlock","description","thumbnail","website","fields","type","readOnly","unifyFields","Name","NodeHash","NameHash","assetFromFields","nodeHash","nameHash","checkAsset","asset","formatter","title","url","properties","functions","transfer","AbiType","Function","payable","constant","stateMutability","StateMutability","Nonpayable","target","inputs","kind","FunctionInputKind","Asset","Replaceable","outputs","ownerOf","View","FunctionOutputKind","Owner","assetsOfOwnerByIndex","events","Event","anonymous","EventInputKind","indexed","Destination","assetFromInputs","hash","a"],"mappings":"AAAA;;;;;;;;;;;;AACAA,OAAOC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C,EAAEC,OAAO,IAAT,EAA7C;AACA,IAAMC,oBAAoBC,QAAQ,iBAAR,CAA1B;AACA,IAAMC,OAAOD,QAAQ,MAAR,CAAb;AACA,IAAME,UAAUF,QAAQ,gBAAR,CAAhB;AACA,IAAMG,WAAW,SAAXA,QAAW,CAACC,IAAD,EAAU;AACvB,QAAIC,OAAO,kEAAX;AACA,QAAID,SAAS,EAAb,EAAiB;AACb,YAAME,SAASF,KAAKG,KAAL,CAAW,GAAX,CAAf;AACA,aAAK,IAAIC,IAAIF,OAAOG,MAAP,GAAgB,CAA7B,EAAgCD,KAAK,CAArC,EAAwCA,GAAxC,EAA6C;AACzC,gBAAME,YAAYX,kBAAkBY,IAAlB,CAAuBL,OAAOE,CAAP,CAAvB,EAAkCI,QAAlC,CAA2C,KAA3C,CAAlB;AACAP,mBAAON,kBAAkBY,IAAlB,CAAuB,IAAIE,MAAJ,CAAWR,OAAOK,SAAlB,EAA6B,KAA7B,CAAvB,EAA4DE,QAA5D,CAAqE,KAArE,CAAP;AACH;AACJ;AACD,WAAO,OAAOP,KAAKO,QAAL,EAAd;AACH,CAVD;AAWA,IAAME,WAAW,SAAXA,QAAW,CAACV,IAAD,EAAU;AACvB,QAAMW,QAAQX,KAAKG,KAAL,CAAW,GAAX,EAAgB,CAAhB,CAAd;AACA,QAAIQ,KAAJ,EAAW;AACP,eAAO,OAAOhB,kBAAkBY,IAAlB,CAAuBI,KAAvB,EAA8BH,QAA9B,CAAuC,KAAvC,CAAd;AACH,KAFD,MAGK;AACD,eAAO,EAAP;AACH;AACJ,CARD;AASAf,QAAQmB,oBAAR,GAA+B;AAC3BC,aAAS,CADkB;AAE3BC,qBAAiB,CAFU;AAG3Bd,UAAM,gBAHqB;AAI3Be,iBAAa,yCAJc;AAK3BC,eAAW,iCALgB;AAM3BC,aAAS,8DANkB;AAO3BC,YAAQ,CACJ,EAAElB,MAAM,MAAR,EAAgBmB,MAAM,QAAtB,EAAgCJ,aAAa,UAA7C,EADI,EAEJ,EAAEf,MAAM,UAAR,EAAoBmB,MAAM,SAA1B,EAAqCJ,aAAa,eAAlD,EAAmEK,UAAU,IAA7E,EAFI,EAGJ,EAAEpB,MAAM,UAAR,EAAoBmB,MAAM,SAA1B,EAAqCJ,aAAa,eAAlD,EAAmEK,UAAU,IAA7E,EAHI,CAPmB;AAY3BC,iBAAa,qBAACH,MAAD;AAAA,eAAa;AACtBI,kBAAMJ,OAAOI,IADS;AAEtBC,sBAAUb,SAASQ,OAAOI,IAAhB,CAFY;AAGtBE,sBAAUzB,SAASmB,OAAOI,IAAhB;AAHY,SAAb;AAAA,KAZc;AAiB3BG,qBAAiB,yBAACP,MAAD;AAAA,eAAa;AAC1BlB,kBAAMkB,OAAOI,IADa;AAE1BI,sBAAUR,OAAOK,QAFS;AAG1BI,sBAAUT,OAAOM;AAHS,SAAb;AAAA,KAjBU;AAsB3BI,gBAAY,oBAACC,KAAD,EAAW;AACnB,eAAOA,MAAM7B,IAAN,GAAcD,SAAS8B,MAAM7B,IAAf,MAAyB6B,MAAMF,QAA/B,IAA2CjB,SAASmB,MAAM7B,IAAf,MAAyB6B,MAAMH,QAAxF,GAAoG,IAA3G;AACH,KAxB0B;AAyB3BI;AAAA,4FAAW,iBAAOD,KAAP;AAAA;AAAA;AAAA;AAAA;AAAA,6DACA;AACHb,2CAAW,iCADR;AAEHe,uCAAO,cAAcF,MAAM7B,IAFxB;AAGHe,6CAAa,eAAec,MAAMH,QAArB,GAAgC,GAH1C;AAIHM,qCAAK,8DAJF;AAKHC,4CAAY;AALT,6BADA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAX;;AAAA;AAAA;AAAA;;AAAA;AAAA,OAzB2B;AAkC3BC,eAAW;AACPC,kBAAU;AAAA,mBAAU;AAChBhB,sBAAMtB,KAAKuC,OAAL,CAAaC,QADH;AAEhBrC,sBAAM,UAFU;AAGhBsC,yBAAS,KAHO;AAIhBC,0BAAU,KAJM;AAKhBC,iCAAiB1C,QAAQ2C,eAAR,CAAwBC,UALzB;AAMhBC,wBAAQ,4CANQ;AAOhBC,wBAAQ,CACJ,EAAEC,MAAM/C,QAAQgD,iBAAR,CAA0BC,KAAlC,EAAyC/C,MAAM,MAA/C,EAAuDmB,MAAM,SAA7D,EAAwEzB,OAAOmC,MAAMH,QAArF,EADI,EAEJ,EAAEmB,MAAM/C,QAAQgD,iBAAR,CAA0BE,WAAlC,EAA+ChD,MAAM,OAArD,EAA8DmB,MAAM,SAApE,EAFI,CAPQ;AAWhB8B,yBAAS;AAXO,aAAV;AAAA,SADH;AAcPC,iBAAS;AAAA,mBAAU;AACf/B,sBAAMtB,KAAKuC,OAAL,CAAaC,QADJ;AAEfrC,sBAAM,OAFS;AAGfsC,yBAAS,KAHM;AAIfC,0BAAU,IAJK;AAKfC,iCAAiB1C,QAAQ2C,eAAR,CAAwBU,IAL1B;AAMfR,wBAAQ,4CANO;AAOfC,wBAAQ,CACJ,EAAEC,MAAM/C,QAAQgD,iBAAR,CAA0BC,KAAlC,EAAyC/C,MAAM,MAA/C,EAAuDmB,MAAM,SAA7D,EAAwEzB,OAAOmC,MAAMH,QAArF,EADI,CAPO;AAUfuB,yBAAS,CACL,EAAEJ,MAAM/C,QAAQsD,kBAAR,CAA2BC,KAAnC,EAA0CrD,MAAM,EAAhD,EAAoDmB,MAAM,SAA1D,EADK;AAVM,aAAV;AAAA,SAdF;AA4BPmC,8BAAsB;AA5Bf,KAlCgB;AAgE3BC,YAAQ;AACJpB,kBAAU,CAAC;AACHhB,kBAAMtB,KAAKuC,OAAL,CAAaoB,KADhB;AAEHxD,kBAAM,UAFH;AAGH2C,oBAAQ,4CAHL;AAIHc,uBAAW,KAJR;AAKHb,oBAAQ,CACJ,EAAEC,MAAM/C,QAAQ4D,cAAR,CAAuBX,KAA/B,EAAsCY,SAAS,IAA/C,EAAqD3D,MAAM,MAA3D,EAAmEmB,MAAM,SAAzE,EADI,EAEJ,EAAE0B,MAAM/C,QAAQ4D,cAAR,CAAuBE,WAA/B,EAA4CD,SAAS,KAArD,EAA4D3D,MAAM,OAAlE,EAA2EmB,MAAM,SAAjF,EAFI,CALL;AASH0C;AAAA,qGAAiB,kBAAOjB,MAAP;AAAA;AAAA;AAAA;AAAA;AAAA,sEAAmB,EAAElB,UAAUkB,OAAO3C,IAAnB,EAAnB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAjB;;AAAA;AAAA;AAAA;;AAAA;AAAA;AATG,SAAD;AADN,KAhEmB;AA6E3B6D,UAAM;AAAA,eAAKC,EAAErC,QAAP;AAAA;AA7EqB,CAA/B;AA+EA","file":"index.js","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst ethereumjs_util_1 = require(\"ethereumjs-util\");\nconst Web3 = require(\"web3\");\nconst types_1 = require(\"../../../types\");\nconst namehash = (name) => {\n    let node = '0000000000000000000000000000000000000000000000000000000000000000';\n    if (name !== '') {\n        const labels = name.split('.');\n        for (let i = labels.length - 1; i >= 0; i--) {\n            const labelHash = ethereumjs_util_1.sha3(labels[i]).toString('hex');\n            node = ethereumjs_util_1.sha3(new Buffer(node + labelHash, 'hex')).toString('hex');\n        }\n    }\n    return '0x' + node.toString();\n};\nconst nodehash = (name) => {\n    const label = name.split('.')[0];\n    if (label) {\n        return '0x' + ethereumjs_util_1.sha3(label).toString('hex');\n    }\n    else {\n        return '';\n    }\n};\nexports.rinkebyENSNameSchema = {\n    version: 1,\n    deploymentBlock: 0,\n    name: 'RinkebyENSName',\n    description: 'Rinkeby Ethereum Name Service (EIP 137)',\n    thumbnail: 'https://ens.domains/img/ens.svg',\n    website: 'https://github.com/ethereum/EIPs/blob/master/EIPS/eip-137.md',\n    fields: [\n        { name: 'Name', type: 'string', description: 'ENS Name' },\n        { name: 'NodeHash', type: 'bytes32', description: 'ENS Node Hash', readOnly: true },\n        { name: 'NameHash', type: 'bytes32', description: 'ENS Name Hash', readOnly: true },\n    ],\n    unifyFields: (fields) => ({\n        Name: fields.Name,\n        NodeHash: nodehash(fields.Name),\n        NameHash: namehash(fields.Name),\n    }),\n    assetFromFields: (fields) => ({\n        name: fields.Name,\n        nodeHash: fields.NodeHash,\n        nameHash: fields.NameHash,\n    }),\n    checkAsset: (asset) => {\n        return asset.name ? (namehash(asset.name) === asset.nameHash && nodehash(asset.name) === asset.nodeHash) : true;\n    },\n    formatter: async (asset) => {\n        return {\n            thumbnail: 'https://ens.domains/img/ens.svg',\n            title: 'ENS Name ' + asset.name,\n            description: '(ENS node ' + asset.nodeHash + ')',\n            url: 'https://github.com/ethereum/EIPs/blob/master/EIPS/eip-137.md',\n            properties: [],\n        };\n    },\n    functions: {\n        transfer: asset => ({\n            type: Web3.AbiType.Function,\n            name: 'setOwner',\n            payable: false,\n            constant: false,\n            stateMutability: types_1.StateMutability.Nonpayable,\n            target: '0xe7410170f87102df0055eb195163a03b7f2bff4a',\n            inputs: [\n                { kind: types_1.FunctionInputKind.Asset, name: 'node', type: 'bytes32', value: asset.nodeHash },\n                { kind: types_1.FunctionInputKind.Replaceable, name: 'owner', type: 'address' },\n            ],\n            outputs: [],\n        }),\n        ownerOf: asset => ({\n            type: Web3.AbiType.Function,\n            name: 'owner',\n            payable: false,\n            constant: true,\n            stateMutability: types_1.StateMutability.View,\n            target: '0xe7410170f87102df0055eb195163a03b7f2bff4a',\n            inputs: [\n                { kind: types_1.FunctionInputKind.Asset, name: 'node', type: 'bytes32', value: asset.nodeHash },\n            ],\n            outputs: [\n                { kind: types_1.FunctionOutputKind.Owner, name: '', type: 'address' },\n            ],\n        }),\n        assetsOfOwnerByIndex: [],\n    },\n    events: {\n        transfer: [{\n                type: Web3.AbiType.Event,\n                name: 'Transfer',\n                target: '0xe7410170f87102df0055eb195163a03b7f2bff4a',\n                anonymous: false,\n                inputs: [\n                    { kind: types_1.EventInputKind.Asset, indexed: true, name: 'node', type: 'bytes32' },\n                    { kind: types_1.EventInputKind.Destination, indexed: false, name: 'owner', type: 'address' },\n                ],\n                assetFromInputs: async (inputs) => ({ nodeHash: inputs.node }),\n            }],\n    },\n    hash: a => a.nodeHash,\n};\n//# sourceMappingURL=index.js.map"]}