{"version":3,"sources":["../../../../dist-tsc/schemas/main/ChainMonsters/index.js"],"names":["Object","defineProperty","exports","value","typed_promisify_1","require","Web3","types_1","MonsterData","Types","ChainMonstersSchema","version","deploymentBlock","name","description","thumbnail","website","fields","type","assetFromFields","ID","assetToFields","asset","formatter","web3","abi","contract","eth","at","promisify","call","data","generation","stats","mID","monster","toString","title","url","properties","functions","transfer","AbiType","Function","payable","constant","stateMutability","StateMutability","Nonpayable","target","inputs","kind","FunctionInputKind","Replaceable","Asset","outputs","ownerOf","View","FunctionOutputKind","Owner","assetsOfOwnerByIndex","events","Event","anonymous","EventInputKind","Source","indexed","Destination","assetFromInputs","tokenId","hash","a"],"mappings":"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","file":"index.js","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst typed_promisify_1 = require(\"typed-promisify\");\nconst Web3 = require(\"web3\");\nconst types_1 = require(\"../../../types\");\nconst MonsterData = require(\"./monsterdata.json\");\nconst Types = require(\"./types.json\");\nexports.ChainMonstersSchema = {\n    version: 2,\n    deploymentBlock: 5106855,\n    name: 'ChainMonsters',\n    description: '100% blockchain based monster collectible game',\n    thumbnail: 'https://cdn-images-1.medium.com/fit/c/90/90/1*xthSZXBLKxsSGkLz1FWyFg.png',\n    website: 'https://chainmonsters.io/',\n    fields: [\n        { name: 'ID', type: 'uint256', description: 'ChainMonster number.' },\n    ],\n    assetFromFields: (fields) => fields.ID,\n    assetToFields: asset => ({ ID: asset }),\n    formatter: async (asset, web3) => {\n        const abi = { \"constant\": true, \"inputs\": [{ \"name\": \"_id\", \"type\": \"uint256\" }], \"name\": \"getMonster\", \"outputs\": [{ \"name\": \"birthTime\", \"type\": \"uint256\" }, { \"name\": \"generation\", \"type\": \"uint256\" }, { \"name\": \"stats\", \"type\": \"uint8[8]\" }, { \"name\": \"mID\", \"type\": \"uint256\" }, { \"name\": \"tradeable\", \"type\": \"bool\" }, { \"name\": \"uID\", \"type\": \"uint256\" }], \"payable\": false, \"stateMutability\": \"view\", \"type\": \"function\" };\n        const contract = web3.eth.contract([abi]).at('0xf7f6c2836293a661be2690fbacae97f3f027e9c4');\n        const data = await typed_promisify_1.promisify(contract[abi.name].call)(asset);\n        const generation = data[1];\n        const stats = data[2];\n        const mID = data[3];\n        const monster = MonsterData[mID.toString()];\n        const type = Types[stats[6].toString()];\n        return {\n            thumbnail: 'https://chainmonsters.io/assets/monsters/' + mID + '.png',\n            title: 'ChainMonster #' + asset + ' - ' + monster.name,\n            description: 'Type: ' + type.name + ', HP ' + stats[0] + ', Attack ' + stats[1] + ', Defense ' + stats[2] + ', Special Attack ' + stats[3] + ', Special Defense ' + stats[4] + ', Speed ' + stats[5],\n            url: 'https://chainmonsters.io/monster/' + asset,\n            properties: [],\n        };\n    },\n    functions: {\n        transfer: asset => ({\n            type: Web3.AbiType.Function,\n            name: 'transfer',\n            payable: false,\n            constant: false,\n            stateMutability: types_1.StateMutability.Nonpayable,\n            target: '0xf7f6c2836293a661be2690fbacae97f3f027e9c4',\n            inputs: [\n                { kind: types_1.FunctionInputKind.Replaceable, name: '_to', type: 'address' },\n                { kind: types_1.FunctionInputKind.Asset, name: '_tokenId', type: 'uint256', value: asset },\n            ],\n            outputs: [],\n        }),\n        ownerOf: asset => ({\n            type: Web3.AbiType.Function,\n            name: 'ownerOf',\n            payable: false,\n            constant: true,\n            stateMutability: types_1.StateMutability.View,\n            target: '0xf7f6c2836293a661be2690fbacae97f3f027e9c4',\n            inputs: [\n                { kind: types_1.FunctionInputKind.Asset, name: '_deedId', type: 'uint256', value: asset },\n            ],\n            outputs: [\n                { kind: types_1.FunctionOutputKind.Owner, name: '_owner', type: 'address' },\n            ],\n        }),\n        assetsOfOwnerByIndex: [],\n    },\n    events: {\n        transfer: [{\n                type: Web3.AbiType.Event,\n                name: 'Transfer',\n                target: '0xf7f6c2836293a661be2690fbacae97f3f027e9c4',\n                anonymous: false,\n                inputs: [\n                    { kind: types_1.EventInputKind.Source, indexed: false, name: 'from', type: 'address' },\n                    { kind: types_1.EventInputKind.Destination, indexed: false, name: 'to', type: 'address' },\n                    { kind: types_1.EventInputKind.Asset, indexed: false, name: 'tokenId', type: 'uint256' },\n                ],\n                assetFromInputs: async (inputs) => inputs.tokenId,\n            }],\n    },\n    hash: a => a,\n};\n//# sourceMappingURL=index.js.map"]}