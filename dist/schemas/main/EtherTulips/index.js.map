{"version":3,"sources":["../../../../dist-tsc/schemas/main/EtherTulips/index.js"],"names":["Object","defineProperty","exports","value","Web3","require","types_1","EtherTulipsSchema","version","deploymentBlock","name","description","thumbnail","website","fields","type","assetFromFields","ID","assetToFields","asset","formatter","response","title","url","properties","functions","transfer","AbiType","Function","payable","constant","stateMutability","StateMutability","Nonpayable","target","inputs","kind","FunctionInputKind","Replaceable","Asset","outputs","ownerOf","View","FunctionOutputKind","Owner","assetsOfOwnerByIndex","events","Event","anonymous","EventInputKind","Source","indexed","Destination","assetFromInputs","tokenId","hash","a"],"mappings":"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","file":"index.js","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst Web3 = require(\"web3\");\nconst types_1 = require(\"../../../types\");\nexports.EtherTulipsSchema = {\n    version: 1,\n    deploymentBlock: 4950098,\n    name: 'EtherTulips',\n    description: 'Tulip mania. Now with fights. On the blockchain.',\n    thumbnail: 'https://s3.amazonaws.com/ethertulips-assets/tulipexamples.png',\n    website: 'https://ethertulips.com/',\n    fields: [\n        { name: 'ID', type: 'uint256', description: 'EtherTulip number.' },\n    ],\n    assetFromFields: (fields) => fields.ID,\n    assetToFields: asset => ({ ID: asset }),\n    formatter: async (asset) => {\n        // const response = await axios.get(``);\n        const response = null;\n        if (response === null) {\n            return {\n                thumbnail: 'https://s3.amazonaws.com/ethertulips-assets/tulipexamples.png',\n                title: 'EtherTulip #' + asset,\n                description: '',\n                url: 'https://ethertulips.com/my_tulips',\n                properties: [],\n            };\n        }\n        else {\n            return {\n                thumbnail: 'https://s3.amazonaws.com/ethertulips-assets/tulipexamples.png',\n                title: 'EtherTulip #' + asset,\n                description: '',\n                url: 'https://ethertulips.com/my_tulips',\n                properties: [],\n            };\n        }\n    },\n    functions: {\n        transfer: asset => ({\n            type: Web3.AbiType.Function,\n            name: 'transfer',\n            payable: false,\n            constant: false,\n            stateMutability: types_1.StateMutability.Nonpayable,\n            target: '0x995020804986274763df9deb0296b754f2659ca1',\n            inputs: [\n                { kind: types_1.FunctionInputKind.Replaceable, name: '_to', type: 'address' },\n                { kind: types_1.FunctionInputKind.Asset, name: '_tokenId', type: 'uint256', value: asset },\n            ],\n            outputs: [],\n        }),\n        ownerOf: asset => ({\n            type: Web3.AbiType.Function,\n            name: 'ownerOf',\n            payable: false,\n            constant: true,\n            stateMutability: types_1.StateMutability.View,\n            target: '0x995020804986274763df9deb0296b754f2659ca1',\n            inputs: [\n                { kind: types_1.FunctionInputKind.Asset, name: '_tokenId', type: 'uint256', value: asset },\n            ],\n            outputs: [\n                { kind: types_1.FunctionOutputKind.Owner, name: 'owner', type: 'address' },\n            ],\n        }),\n        assetsOfOwnerByIndex: [],\n    },\n    events: {\n        transfer: [{\n                type: Web3.AbiType.Event,\n                name: 'Transfer',\n                target: '0x995020804986274763df9deb0296b754f2659ca1',\n                anonymous: false,\n                inputs: [\n                    { kind: types_1.EventInputKind.Source, indexed: true, name: 'from', type: 'address' },\n                    { kind: types_1.EventInputKind.Destination, indexed: true, name: 'to', type: 'address' },\n                    { kind: types_1.EventInputKind.Asset, indexed: true, name: 'tokenId', type: 'uint256' },\n                ],\n                assetFromInputs: async (inputs) => inputs.tokenId,\n            }],\n    },\n    hash: a => a,\n};\n//# sourceMappingURL=index.js.map"]}