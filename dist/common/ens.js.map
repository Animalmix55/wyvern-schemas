{"version":3,"sources":["../../dist-tsc/common/ens.js"],"names":["Object","defineProperty","exports","value","ethereumjs_util_1","require","namehash","name","node","labels","split","i","length","labelHash","sha3","toString","Buffer","nodehash","label","ENSNameBaseSchema","fields","type","description","readOnly","assetFromFields","Name","nodeHash","nameHash","checkAsset","asset","hash"],"mappings":"AAAA;;AACAA,OAAOC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C,EAAEC,OAAO,IAAT,EAA7C;AACA,IAAMC,oBAAoBC,QAAQ,iBAAR,CAA1B;AACAH,QAAQI,QAAR,GAAmB,UAACC,IAAD,EAAU;AACzB,QAAIC,OAAO,kEAAX;AACA,QAAID,SAAS,EAAb,EAAiB;AACb,YAAME,SAASF,KAAKG,KAAL,CAAW,GAAX,CAAf;AACA,aAAK,IAAIC,IAAIF,OAAOG,MAAP,GAAgB,CAA7B,EAAgCD,KAAK,CAArC,EAAwCA,GAAxC,EAA6C;AACzC,gBAAME,YAAYT,kBAAkBU,IAAlB,CAAuBL,OAAOE,CAAP,CAAvB,EAAkCI,QAAlC,CAA2C,KAA3C,CAAlB;AACAP,mBAAOJ,kBAAkBU,IAAlB,CAAuB,IAAIE,MAAJ,CAAWR,OAAOK,SAAlB,EAA6B,KAA7B,CAAvB,EAA4DE,QAA5D,CAAqE,KAArE,CAAP;AACH;AACJ;AACD,WAAO,OAAOP,KAAKO,QAAL,EAAd;AACH,CAVD;AAWAb,QAAQe,QAAR,GAAmB,UAACV,IAAD,EAAU;AACzB,QAAMW,QAAQX,KAAKG,KAAL,CAAW,GAAX,EAAgB,CAAhB,CAAd;AACA,QAAIQ,KAAJ,EAAW;AACP,eAAO,OAAOd,kBAAkBU,IAAlB,CAAuBI,KAAvB,EAA8BH,QAA9B,CAAuC,KAAvC,CAAd;AACH,KAFD,MAGK;AACD,eAAO,EAAP;AACH;AACJ,CARD;AASAb,QAAQiB,iBAAR,GAA4B;AACxBC,YAAQ,CACJ,EAAEb,MAAM,MAAR,EAAgBc,MAAM,QAAtB,EAAgCC,aAAa,UAA7C,EADI,EAEJ;AACIf,cAAM,UADV;AAEIc,cAAM,SAFV;AAGIC,qBAAa,eAHjB;AAIIC,kBAAU;AAJd,KAFI,EAQJ;AACIhB,cAAM,UADV;AAEIc,cAAM,SAFV;AAGIC,qBAAa,eAHjB;AAIIC,kBAAU;AAJd,KARI,CADgB;AAgBxBC,qBAAiB,yBAACJ,MAAD;AAAA,eAAa;AAC1Bb,kBAAMa,OAAOK,IADa;AAE1BC,sBAAUxB,QAAQe,QAAR,CAAiBG,OAAOK,IAAxB,CAFgB;AAG1BE,sBAAUzB,QAAQI,QAAR,CAAiBc,OAAOK,IAAxB;AAHgB,SAAb;AAAA,KAhBO;AAqBxBG,gBAAY,oBAACC,KAAD,EAAW;AACnB,eAAOA,MAAMtB,IAAN,GACDL,QAAQI,QAAR,CAAiBuB,MAAMtB,IAAvB,MAAiCsB,MAAMF,QAAvC,IACEzB,QAAQe,QAAR,CAAiBY,MAAMtB,IAAvB,MAAiCsB,MAAMH,QAFxC,GAGD,IAHN;AAIH,KA1BuB;AA2BxBI,UAAM;AAAA,YAAGJ,QAAH,QAAGA,QAAH;AAAA,eAAkBA,QAAlB;AAAA;AA3BkB,CAA5B;AA6BA","file":"ens.js","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst ethereumjs_util_1 = require(\"ethereumjs-util\");\nexports.namehash = (name) => {\n    let node = '0000000000000000000000000000000000000000000000000000000000000000';\n    if (name !== '') {\n        const labels = name.split('.');\n        for (let i = labels.length - 1; i >= 0; i--) {\n            const labelHash = ethereumjs_util_1.sha3(labels[i]).toString('hex');\n            node = ethereumjs_util_1.sha3(new Buffer(node + labelHash, 'hex')).toString('hex');\n        }\n    }\n    return '0x' + node.toString();\n};\nexports.nodehash = (name) => {\n    const label = name.split('.')[0];\n    if (label) {\n        return '0x' + ethereumjs_util_1.sha3(label).toString('hex');\n    }\n    else {\n        return '';\n    }\n};\nexports.ENSNameBaseSchema = {\n    fields: [\n        { name: 'Name', type: 'string', description: 'ENS Name' },\n        {\n            name: 'NodeHash',\n            type: 'bytes32',\n            description: 'ENS Node Hash',\n            readOnly: true,\n        },\n        {\n            name: 'NameHash',\n            type: 'bytes32',\n            description: 'ENS Name Hash',\n            readOnly: true,\n        },\n    ],\n    assetFromFields: (fields) => ({\n        name: fields.Name,\n        nodeHash: exports.nodehash(fields.Name),\n        nameHash: exports.namehash(fields.Name),\n    }),\n    checkAsset: (asset) => {\n        return asset.name\n            ? exports.namehash(asset.name) === asset.nameHash &&\n                exports.nodehash(asset.name) === asset.nodeHash\n            : true;\n    },\n    hash: ({ nodeHash }) => nodeHash,\n};\n//# sourceMappingURL=ens.js.map"]}