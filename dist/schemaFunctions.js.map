{"version":3,"sources":["../dist-tsc/schemaFunctions.js"],"names":["Object","defineProperty","exports","value","ethABI","require","types_1","failWith","msg","Error","encodeReplacementPattern","abi","replaceKind","FunctionInputKind","Replaceable","allowReplaceByte","doNotAllowReplaceByte","maskArr","inputs","map","type","elementaryName","i","encoded","encodeSingle","generateDefaultValue","kind","push","repeat","length","mask","reduce","x","y","ret","char","byte","buf","Buffer","alloc","writeUInt8","concat","toString","encodeCall","parameters","inputTypes","methodID","name","rawEncode","encodeSell","schema","asset","address","transfer","getTransferFunction","target","calldata","encodeDefaultCall","replacementPattern","encodeBuy","replaceables","filter","ownerInputs","Owner","input","Asset","functions","transferFrom"],"mappings":"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","file":"schemaFunctions.js","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst ethABI = require(\"ethereumjs-abi\");\nconst types_1 = require(\"./types\");\nconst failWith = (msg) => {\n    throw new Error(msg);\n};\n// export const encodeReplacementPattern = WyvernProtocol.encodeReplacementPattern;\n// Copied from wyvern-js 3.0.0-rc1, with generateDefaultValue changed\nexports.encodeReplacementPattern = (abi, replaceKind = types_1.FunctionInputKind.Replaceable) => {\n    const allowReplaceByte = '1';\n    const doNotAllowReplaceByte = '0';\n    /* Four bytes for method ID. */\n    const maskArr = [doNotAllowReplaceByte, doNotAllowReplaceByte,\n        doNotAllowReplaceByte, doNotAllowReplaceByte];\n    /* This DOES NOT currently support dynamic-length data (arrays). */\n    abi.inputs.map(i => {\n        const type = ethABI.elementaryName(i.type);\n        const encoded = ethABI.encodeSingle(type, generateDefaultValue(i.type));\n        if (i.kind === replaceKind) {\n            maskArr.push(allowReplaceByte.repeat(encoded.length));\n        }\n        else {\n            maskArr.push(doNotAllowReplaceByte.repeat(encoded.length));\n        }\n    });\n    const mask = maskArr.reduce((x, y) => x + y, '');\n    const ret = [];\n    /* Encode into bytes. */\n    for (const char of mask) {\n        const byte = char === allowReplaceByte ? 255 : 0;\n        const buf = Buffer.alloc(1);\n        buf.writeUInt8(byte, 0);\n        ret.push(buf);\n    }\n    return '0x' + Buffer.concat(ret).toString('hex');\n};\nexports.encodeCall = (abi, parameters) => {\n    const inputTypes = abi.inputs.map(i => i.type);\n    return '0x' + Buffer.concat([\n        ethABI.methodID(abi.name, inputTypes),\n        ethABI.rawEncode(inputTypes, parameters),\n    ]).toString('hex');\n};\nconst generateDefaultValue = (type) => {\n    switch (type) {\n        case 'address':\n        case 'bytes20':\n            /* Null address is sometimes checked in transfer calls. */\n            return '0x1111111111111111111111111111111111111111';\n        case 'bytes32':\n            return '0x0000000000000000000000000000000000000000000000000000000000000000';\n        case 'bool':\n            return false;\n        case 'int':\n        case 'uint':\n        case 'uint8':\n        case 'uint16':\n        case 'uint32':\n        case 'uint64':\n        case 'uint256':\n            return 0;\n        default:\n            failWith('Default value not yet implemented for type: ' + type);\n    }\n};\nexports.encodeSell = (schema, asset, address) => {\n    const transfer = getTransferFunction(schema)(asset);\n    return {\n        target: transfer.target,\n        calldata: exports.encodeDefaultCall(transfer, address),\n        replacementPattern: exports.encodeReplacementPattern(transfer),\n    };\n};\nexports.encodeBuy = (schema, asset, address) => {\n    const transfer = getTransferFunction(schema)(asset);\n    const replaceables = transfer.inputs.filter((i) => i.kind === types_1.FunctionInputKind.Replaceable);\n    const ownerInputs = transfer.inputs.filter((i) => i.kind === types_1.FunctionInputKind.Owner);\n    // Validate\n    if (replaceables.length !== 1) {\n        failWith('Only 1 input can match transfer destination, but instead ' + replaceables.length + ' did');\n    }\n    // Compute calldata\n    const parameters = transfer.inputs.map((input) => {\n        switch (input.kind) {\n            case types_1.FunctionInputKind.Replaceable:\n                return address;\n            case types_1.FunctionInputKind.Owner:\n                return generateDefaultValue(input.type);\n            default:\n                return input.value.toString();\n        }\n    });\n    const calldata = exports.encodeCall(transfer, parameters);\n    // Compute replacement pattern\n    let replacementPattern = '0x';\n    if (ownerInputs.length > 0) {\n        replacementPattern = exports.encodeReplacementPattern(transfer, types_1.FunctionInputKind.Owner);\n    }\n    return {\n        target: transfer.target,\n        calldata,\n        replacementPattern,\n    };\n};\nexports.encodeDefaultCall = (abi, address) => {\n    const parameters = abi.inputs.map(input => {\n        switch (input.kind) {\n            case types_1.FunctionInputKind.Asset:\n                return input.value;\n            case types_1.FunctionInputKind.Replaceable:\n                return generateDefaultValue(input.type);\n            case types_1.FunctionInputKind.Owner:\n                return address;\n        }\n    });\n    return exports.encodeCall(abi, parameters);\n};\nfunction getTransferFunction(schema) {\n    return schema.functions.transferFrom\n        || schema.functions.transfer;\n}\n//# sourceMappingURL=schemaFunctions.js.map"]}